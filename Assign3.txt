USER MANAGEMENT SYSTEM

index.html:

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>User Management System</title>
    <link rel="stylesheet" href="styles.css">
</head>
<body>
    <div class="container">
        <h1>User Management System</h1>
        
        <form id="userForm">
            <input type="hidden" id="userId">
            <div>
                <label for="name">Name:</label>
                <input type="text" id="name" required>
            </div>
            <div>
                <label for="email">Email:</label>
                <input type="email" id="email" required>
            </div>
            <button type="submit">Save User</button>
        </form>
        
        <h2>Users</h2>
        <ul id="userList"></ul>
    </div>

    <script src="script.js"></script>
</body>
</html>


JS FILE:
document.addEventListener('DOMContentLoaded', () => {
    const userForm = document.getElementById('userForm');
    const userList = document.getElementById('userList');
    const userIdInput = document.getElementById('userId');
    const nameInput = document.getElementById('name');
    const emailInput = document.getElementById('email');

    const apiUrl = 'http://localhost:3000/users';

    // Fetch users and display them
    const fetchUsers = async () => {
        const response = await fetch(apiUrl);
        const users = await response.json();
        userList.innerHTML = '';
        users.forEach(user => {
            const li = document.createElement('li');
            li.innerHTML = `
                ${user.name} (${user.email})
                <button class="edit" data-id="${user.id}">Edit</button>
                <button class="delete" data-id="${user.id}">Delete</button>
            `;
            userList.appendChild(li);
        });
    };

    // Add or update a user
    userForm.addEventListener('submit', async (event) => {
        event.preventDefault();

        const id = userIdInput.value;
        const name = nameInput.value;
        const email = emailInput.value;

        if (id) {
            // Update user
            await fetch(`${apiUrl}/${id}`, {
                method: 'PUT',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ name, email })
            });
        } else {
            // Create user
            await fetch(apiUrl, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ name, email })
            });
        }

        userForm.reset();
        fetchUsers();
    });

    // Edit or delete a user
    userList.addEventListener('click', async (event) => {
        if (event.target.classList.contains('edit')) {
            const id = event.target.dataset.id;
            const response = await fetch(`${apiUrl}/${id}`);
            const user = await response.json();
            userIdInput.value = user.id;
            nameInput.value = user.name;
            emailInput.value = user.email;
        }

        if (event.target.classList.contains('delete')) {
            const id = event.target.dataset.id;
            await fetch(`${apiUrl}/${id}`, {
                method: 'DELETE'
            });
            fetchUsers();
        }
    });

    // Initial fetch of users
    fetchUsers();
});


CSS:

body {
    font-family: Arial, sans-serif;
    background-color: #f4f4f4;
    margin: 0;
    padding: 0;
    display: flex;
    justify-content: center;
    align-items: center;
    height: 100vh;
}

.container {
    background: white;
    padding: 20px;
    border-radius: 8px;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    width: 400px;
}

h1, h2 {
    text-align: center;
}

form {
    display: flex;
    flex-direction: column;
    gap: 10px;
}

input[type="text"],
input[type="email"] {
    width: 100%;
    padding: 8px;
    border: 1px solid #ccc;
    border-radius: 4px;
}

button {
    padding: 10px;
    background: #28a745;
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
}

button:hover {
    background: #218838;
}

ul {
    list-style: none;
    padding: 0;
}

li {
    display: flex;
    justify-content: space-between;
    padding: 8px;
    border-bottom: 1px solid #ccc;
}

li:last-child {
    border-bottom: none;
}

button.edit,
button.delete {
    background: #007bff;
    border: none;
    color: white;
    padding: 5px;
    cursor: pointer;
    border-radius: 4px;
}

button.delete {
    background: #dc3545;
}

button.edit:hover {
    background: #0056b3;
}

button.delete:hover {
    background: #c82333;
}



APP.JS:

// app.js

const express = require('express');
const bodyParser = require('body-parser');
const path = require('path');

const app = express();
const port = 3000;

// Middleware
app.use(bodyParser.json());
app.use(express.static(path.join(__dirname, 'public')));

// Root route
app.get('/', (req, res) => {
  res.sendFile(path.join(__dirname, 'public', 'index.html'));
});

// Import user routes
const userRoutes = require('./routes/user');
app.use('/users', userRoutes);

app.listen(port, () => {
  console.log(`Server is running on http://localhost:${port}`);
});



